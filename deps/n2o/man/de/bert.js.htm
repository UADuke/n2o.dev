<!DOCTYPE html><html><head><meta charset="utf-8" /><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="description" content="" /><meta name="author" content="Maxim Sokhatsky" />
<title>BERT.JS</title>
<link rel="stylesheet" href="https://n2o.dev/blank.css"/>
<link rel="shortcut icon" type="image/x-icon" href="https://n2o.dev/img/favicon.ico"/>
<link rel="apple-touch-icon" sizes="180x180" href="https://n2o.dev/img/apple-touch-icon.png"/>
<link rel="icon" type="image/png" sizes="32x32" href="https://n2o.dev/img/favicon-32x32.png"/>
<link rel="icon" type="image/png" sizes="16x16" href="https://n2o.dev/img/favicon-16x16.png"/>
<link rel="manifest" href="https://n2o.dev/img/site.webmanifest"/>
</head><body><nav>
    <a href="https://n2o.dev">DEV</a>
    <a href="https://ws.n2o.space">N2O</a>
    <a href="#" style="background:#ededed;">BERT.JS</a>
  <div class="dropdown">
    <a onclick="drop()" class="dropbtn">DE</a>
    <div id="dropdown" class="dropdown-content">
      <a href="https://n2o.dev/deps/n2o/man/ua/bert.js.htm">UA</a>
      <a href="https://n2o.dev/deps/n2o/man/de/bert.js.htm">DE</a>
      <a href="https://ws.n2o.space/man/bert.js.htm">EN</a>
    </div>
  </div>
</nav><header>
    <a href="../index.html"><img src="https://n2o.space/img/Synrc Neo.svg" /></a>
    <h1>BERT.JS</h1>
</header>
<main>
<article>
    <section>
        <h3>Einleitung</h3>


        <p>
            Das <a href="https://github.com/synrc/n2o/blob/master/priv/bert.js">bert.js</a> Modul stellt JavaScript-Encoder / Decoder
            für Erlang's <a href="http://erlang.org/doc/apps/erts/erl_ext_dist.html">External Term Format</a> zur Verfügung.
            Das bedeutet, dass Ihre JavaScript-Anwendungen in Erlang's Sprache mit Erlang Anwendungen kommunizieren können.
            Dieses Modul nutzt dazu <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView">Dataview</a> 
            und <b>getUint8</b>, <b>getUInt16</b>, und <b>getUInt32</b> Wort Accessoren, was der schnellste Weg für den
            Umgang mit Binärdateien in JavaScript ist.

            Die Bibliothek wird sowohl in Erang als auch Haskell N2O-Versionen verwendet.
            Die Größe von <b>bert.js</b> ist 4654 Bytes.
        </p>

        <p>
            Beachten Sie, dass es sich bei dieser Library um eine schnelle Low-Level Version des BERT-Encoders/Decoders handelt.
            Wenn Sie eine JavaScript-SDK mit Feldnamen wie in Erlang's Include-Dateien generieren möchten,
            nehmen Sie bitte <a href="https://synrc.github.io/bert">BERT</a> als High-Level-Gegenstück-Bibliothek,
            die Wrapper um bert.js erzeugt und ein besseres JavaScript-Erlebnis bietet.
        </p>

        <p>Erlang-Struktur, die ins BERT-Format kompiliert:</p>
        <figure><code>
 #io{ code = login,
      data = { 'Token', 42 } }
        </code></figure>

        <p>Zielstruktur von <a href="#">bert.js</a> — dem schnellen Low-Level-Parser des BERT Formats.</p>
        <p></p>
        <figure><code>
 { t: 104,
   v: [ { t: 100, v: "io" },
        { t: 100, v: "login" },
        { t: 104, v: [ { t: 100, v: "Token" },
                       { t: 97,  v: 42 } ] } ] }
        </code></figure>
        <p>Zielstruktur des erzeugten Parsers durch <a href="https://synrc.github.io/bert">BERT</a> parse transform:</p>
        <p></p>
        <figure><code>
 { tup: 'io',
   code: 'login',
   data: { tup: '$',
           0: 'Token',
           1: 42 } },
        </code></figure>
    </section>
    <section>
        <p>Diese praktische Untergruppen werden vom BERT-Format unterstützt:</p>
    </section>
    <section>
        <h3>70</h3>
        <p>IEEE-754 float encoding.
            Ein Float-Wert wird als 8 Bytes im Big-Endian-IEEE-Format gespeichert.
            Dieser Term wird in der kleineren Version 1 des externen Formats verwendet.</p>
        <figure><code>
 1    8
 70   IEEE-754 float
        </code></figure>
    </section>
    <section>
        <h3>97</h3>
        <p>Byte-Codierung. Vorzeichenloser 8-Bit-Integer.</p>
        <figure><code>
 1    1
 97   Int
        </code></figure>
    </section>
    <section>
        <h3>98</h3>
        <p>Ganzzahl/Integer-Codierung. 32-Bit-Integer im Big-Endian-Format.</p>
        <figure><code>
 1    4
 98   Int
        </code></figure>
    </section>
    <section>
        <h3>99</h3>
        <p>
            Float POSIX-Codierung. Ein Float wird im String-Format gespeichert. Das
            verwendete Format, das in sprintf benutzt wird um den Float zu formattieren ist "%.20e"
            (es werden mehr Bytes zugeteilt, als notwendig). Um den
            Float zu entpacken, verwenden Sie sscanf mit Format "%lf".
        </p>
        <figure><code>
 1    31
 99   Float POSIX string.
        </code></figure>
    </section>
    <section>
        <h3>100</h3>
        <p>
            Atom-Codierung. Ein Atom ist mit einer 2-Byte-Länge ohne Vorzeichen in
            Big-Endian-Ordnung gespeichert, gefolgt von N-Zahlen von 8-Bit-Latin-1
            Zeichen, die die Namen bilden. Der maximal zulässige Wert für
            Len ist 255.</p>
        <figure><code>
 1    2    N
 100  N    Characters
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>104</h3>
        <p>
            Tuple-Codierung. Das Arity Feld ist ein Byte N ohne Vorzeichen, der bestimmt,
            wie viele Elemente, in Abschnittselementen folgen.</p>
        <figure><code>
 1    1    N
 104  N    Elements
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>105</h3>
        <p>
            Große Tuple-Codierung. Gleichwie 104, außer, dass N ein 4 Byte-Integer ohne
            Vorzeichen in Big-Endian-Format ist.
        </p>
        <figure><code>
 1    4    N
 105  N    Elements
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>106</h3>
        <p>Nil.</p>
        <figure><code>
 1
 106
        </code></figure>
    </section>
    <section>
        <h3>107</h3>
        <p>
            String-Codierung. Weil Feld N eine 2-Byte-Integer ohne Vorzeichen ist (big-endian),
            müssen Implementationen sicherstellen, dass Listen, die länger mehr als 65535 Elemente haben als 108
            codiert werden müssen.
        </p>
        <figure><code>
 1    2    N
 107  N    Characters
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>108</h3>
        <p>
            List-Codierung. N ist die Anzahl der Elemente, die in Abschnitt Zeichen folgen.
            Tail ist das endgültige Ende der Liste; es ist 106 für eine richtige Liste, kann
            aber von jedem Typ sein, wenn die Liste ungeeignet ist (zum Beispiel [a | b]).
        </p>
        <figure><code>
 1    4    N
 108  N    Characters  Tail
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>109</h3>
        <p>
            Binäre-Codierung. Binärdateien werden mit Bit-Syntaxausdruck erzeugt, oder
            mit erlang:list_to_binary/1, erlang:term_to_binary/1 oder als
            Input von binären Ports. Das N-Längenfeld ist ein
            4-Byte-Integer, ohne Vorzeichen (big-endian).
        </p>
        <figure><code>
 1    4    N
 109  N    Bytes
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>110</h3>
        <p>
            Small-Bignum-Codierung. Bignums werden in einstelliger Form mit einem Sign-Byte
            gespeichert, das heißt, 0, wenn die Binum positiv ist, und 1, wenn sie
            negativ ist. Die Ziffern mit dem niedrigstwertigen Byte
            werden zuerst gespeichert. Um die ganze Zahl zu berechnen,
            kann die folgende Formel verwendet werden:
        </p>
        <figure><code>
 1    1    1    n
 110  n    Sign d(0)...d(n-1)
        </code></figure>
        <p>
 B = 256,<br />
     d<sub>0</sub>*B<sup>0</sup>
   + d<sub>1</sub>*B<sup>1</sup>
   + d<sub>2</sub>*B<sup>2</sup>
   + ... d<sub>N-1</sub>*B<sup>(n-1)</sup>
 </p>
    </section>
    <section>
        <h3>111</h3>
        <p>
            Large-Bignum-Codierung. Gleiche wie 110, außer dass das Längenfeld
            eine 4-Byte-Integer ohne Vorzeichen ist.
        </p>
        <figure><code>
 1    4    1    n
 111  n    Sign d(0)...d(n-1)
        </code></figure>
    </section>
    <section>
        <h3>115</h3>
        <p>
            Small-Atom-Codierung. Ein Atom wird als 1-Byte-Länge ohne Vorzeichen gespeichert,
            gefolgt von einer Anzahl an N 8-Bit Latin-1 Buchstaben.
        </p>
        <figure><code>
 1    1    N
 115  N    Characters
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>116</h3>
        <p>
            Maps-Codierung. Das N-Feld ist ein 4-Byte-Integer ohne Vorzeichen
            im Big-Endian-Format, das die Anzahl der Key-Value Paare in der Map bestimmt.
            Key und Value Paare (Ki => Vi) werden in Abschnittsparen in der folgenden
            Reihenfolge codiert: K1, V1, K2, V2, ..., Kn, V,.
            Duplizierte Keys sind nicht erlaubt innerhalb der gleichen Map.
            Erforder OTP 17.
        </p>
        <figure><code>
 1    4    N
 116  N    K1,V1,K2,V2,...
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>118</h3>
        <p>
            UTF-8-Atom-Codierung. Ein Atom ist als 2-Byte-Länge ohne Vorzeichen in Big-Endian-Ordnung gespeichert, gefolgt von N Bytes die Zeichen in UTF-8 codiert.
        </p>
        <figure><code>
 1    2    N
 118  N    Characters
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>119</h3>
        <p>
            UTF-8-Small-Atom Codierung.

            Ein Atom ist als 1-Byte-Länge ohne Vorzeichen gespeichert,
            gefolgt von N Bytes, die die Buchstaben im UTF-8 Format enthalten.
            Längere atome im UTF-8 Format können mit 118 dargestellt werden.
        </p>
        <figure><code>
 1    1    N
 119  N    Characters
        </code><figure>
    </figure></figure></section>
    <section>
        <h3>API</h3>
        <h4>enc(json)</h4>
        <p>Codierte interne JSON Binärbuffer.</p>
        <figure><code>
 > enc({t: 119, v: "日本"})

 Uint8Array([131,119,6,230,151,165,230,156,172])
         </code></figure>
        <h4>dec(buffer)</h4>
        <p>Dekodier Binärbuffer zu internem JSON.</p>
        <figure><code>
 > dec((new Uint8Array([131,119,6,230,151,165,230,156,172])).buffer)

 {t: 119, v: "日本"}
         </code></figure>
        <h4>bin(x)</h4>
        <figure><code>
 > dec(enc(bin('N2O,')).buffer))

 {t: 109, v: "N2O,"}

 [131,109,0,0,0,4,78,50,79,44]
         </code></figure>
        <p>Erzeugt JSON für Binärkodierung.</p>
        <h4>atom(x)</h4>
        <p>Erzeugt JSON für Latin-1 Atom Codierung.</p>
        <figure><code>
 > dec(enc(atom('ok')).buffer))

 {t: 100, v: "ok"}

 [131,100,0,2,111,107]
         </code></figure>
        <h4>string(x)</h4>
        <p>Erzeugt JSON für String-Codierung.</p>
        <figure><code>
 > dec(enc(string('ok')).buffer))

 {t: 107, v: "ok"}

 [131,107,0,2,111,107]
         </code></figure>
        <h4>float(x)</h4>
        <p>Erzeugt JSON für IEEE-754 float Codierung.</p>
        <figure><code>
 > dec(enc(float('123.13')).buffer)

 {t: 70, v: 123.13}

 [131,70,64,94,200,81,235,133,30,184]
         </code></figure>
        <h4>number(x)</h4>
        <p>Erstellt JSON für Integer und GMP Big-Integer Codierung.</p>
        <figure><code>
 > dec(enc(number('1')).buffer)

 {t: 97, v: 1}

 [131,97,1]

 > dec(enc(number('100000000')).buffer)
 {t: 98, v: 100000000}

 [131,98,5,245,225,0]

 > dec(enc(number('10000000000000000000000')).buffer)

 {t: 110, v: 1e+22}

 [131,110,10,0,0,0,64,178,186,201,224,25,30,2]
         </code></figure>
        <h4>list(x,...)</h4>
        <p>Erzeugt JSON für List-Codierung</p>
        <figure><code>
 > dec(enc(list(atom('1'),number('1'),bin('1'))).buffer)

 {t: 108, v: [{t: 100, v: "1"},
              {t: 97, v: 1},
              {t: 109, v: "1"}]}

 [131,108,0,0,0,3,100,0,1,49,97,1,109,0,0,0,1,49,106]
         </code></figure>
        <h4>tuple(x,...)</h4>
        <p>Erzeugt JSON für Tuple-Codierung</p>
        <figure><code>
 > dec(enc(tuple(atom('1'),number('1'),bin('1'))).buffer)

 {t: 104, v: [{t: 100, v: "1"},
              {t: 97, v: 1},
              {t: 109, v: "1"}]}

 [131,104,3,100,0,1,49,97,1,109,0,0,0,1,49]
         </code></figure>
        <h4>map(x,...)</h4>
        <p>Erzeugt JSON für Map-Codierung</p>
        <figure><code>
 > dec(enc(map(
        {k:bin('rent'),v:float(1.2)},
       {k:atom('ok'),  v:list(number(1),float(1.0),bin('1'))})).buffer)

 {t:116, v:[{k:{t:109,v:"rent"},v:{t:70, v:1.2}},
            {k:{t:100,v:"ok"},  v:{t:108,v:[{t:97, v:1},
                                            {t:70, v:1},
                                            {t:109,v:"1"}]}}]}

 [131,116,0,0,0,2,109,0,0,0,4,114,101,110,
  116,70,63,243,51,51,51,51,51,51,100,0,2,
  111,107,108,0,0,0,3,97,1,70,63,240,0,0,0,
  0,0,0,109,0,0,0,1,49,106]
         </code></figure>
    </section>
    <section>

<p>Siehe auch:
<b>
<a href="utf8.js.htm">utf8.js</a></b>,
<a href="ieee754.js.htm">ieee754.js</a>,
<a href="heart.js.htm">heart.js</a>,
<a href="nitro.js.htm">nitro.js</a>,
<a href="mq.js.htm">mq.js</a>,
<a href="n2o.js.htm">n2o.js</a>.
</p>

    </section>
</article>
</main><footer>
    2005—2019 © Synrc Research Center
</footer>
<script>function drop(){document.getElementById("dropdown").classList.toggle("show");}</script>
</body></html>
